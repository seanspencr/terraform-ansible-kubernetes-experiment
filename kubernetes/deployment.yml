---
# Storage Class for CSI Local Disk
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: Delete

---
# Persistent Volume for Database (Local Disk)
apiVersion: v1
kind: PersistentVolume
metadata:
  name: db-pv
  labels:
    type: local
spec:
  storageClassName: local-storage
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/db  # Local disk path on worker node
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - k8s-worker-1  # Bind to specific node

---
# Persistent Volume Claim for Database
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-pvc
spec:
  storageClassName: local-storage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
# ConfigMap for Database Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-config
data:
  POSTGRES_DB: "microservices_db"
  POSTGRES_USER: "dbuser"

---
# Secret for Database Password
apiVersion: v1
kind: Secret
metadata:
  name: db-secret
type: Opaque
data:
  POSTGRES_PASSWORD: cG9zdGdyZXNxbA==  # Base64 encoded "postgresql"

---
# Database Deployment (PostgreSQL with CSI)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  labels:
    app: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
      - name: postgres
        image: myregistry.com/postgres:13-alpine  # Dummy registry URL
        ports:
        - containerPort: 5432
        envFrom:
        - configMapRef:
            name: db-config
        - secretRef:
            name: db-secret
        volumeMounts:
        - name: db-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - dbuser
            - -d
            - microservices_db
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - dbuser
            - -d
            - microservices_db
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: db-storage
        persistentVolumeClaim:
          claimName: db-pvc

---
# Database Service (ClusterIP - Internal only)
apiVersion: v1
kind: Service
metadata:
  name: db-service
  labels:
    app: db
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: db

---
# Backend Go Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-go
  labels:
    app: backend-go
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend-go
  template:
    metadata:
      labels:
        app: backend-go
    spec:
      containers:
      - name: backend-go
        image: myregistry.com/backend-go:latest  # Dummy registry URL
        ports:
        - containerPort: 8080
        env:
        - name: DB_HOST
          value: "db-service"
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: POSTGRES_DB
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: POSTGRES_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: POSTGRES_PASSWORD
        - name: RUST_SERVICE_URL
          value: "http://backend-rust-service:8081"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Backend Go Service (ClusterIP - Internal only)
apiVersion: v1
kind: Service
metadata:
  name: backend-go-service
  labels:
    app: backend-go
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: backend-go

---
# Backend Rust Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-rust
  labels:
    app: backend-rust
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend-rust
  template:
    metadata:
      labels:
        app: backend-rust
    spec:
      containers:
      - name: backend-rust
        image: myregistry.com/backend-rust:latest  # Dummy registry URL
        ports:
        - containerPort: 8081
        env:
        - name: DB_HOST
          value: "db-service"
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: POSTGRES_DB
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: POSTGRES_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: POSTGRES_PASSWORD
        - name: GO_SERVICE_URL
          value: "http://backend-go-service:8080"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Backend Rust Service (ClusterIP - Internal only)
apiVersion: v1
kind: Service
metadata:
  name: backend-rust-service
  labels:
    app: backend-rust
spec:
  type: ClusterIP
  ports:
  - port: 8081
    targetPort: 8081
    protocol: TCP
  selector:
    app: backend-rust

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app: frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: myregistry.com/frontend:latest  # Dummy registry URL
        ports:
        - containerPort: 3000
        env:
        - name: REACT_APP_GO_API_URL
          value: "http://backend-go-service:8080"
        - name: REACT_APP_RUST_API_URL
          value: "http://backend-rust-service:8081"
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Frontend Service (LoadBalancer - External Access via MetalLB)
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  labels:
    app: frontend
spec:
  type: LoadBalancer  # Will get external IP from MetalLB
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  - port: 443
    targetPort: 3000
    protocol: TCP
    name: https
  selector:
    app: frontend

---
# Network Policy for Database Security (Optional)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: db-network-policy
spec:
  podSelector:
    matchLabels:
      app: db
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: backend-go
    - podSelector:
        matchLabels:
          app: backend-rust
    ports:
    - protocol: TCP
      port: 5432

---
# Horizontal Pod Autoscaler for Frontend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Horizontal Pod Autoscaler for Backend Go
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-go-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend-go
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70

---
# Horizontal Pod Autoscaler for Backend Rust
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-rust-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend-rust
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70