---
- name: Setup K8s Cluster
  hosts:
  - master-node
  - worker-node
  become: yes
  tasks:
  - name: Disable swap
    command: swapoff -a

  - name: Remove swap entry from /etc/fstab
    lineinfile:
      path: /etc/fstab
      regexp: '^(?i)\S+\s+\S+\s+swap'  # Case-insensitive matching for "swap" in the third column
      state: absent
      
  - name: Load Kernel Modules
    copy:
      dest: /etc/modules-load.d/k8s.conf
      content: |
        overlay
        br_netfilter

  - name: Load overlay and br_netfilter modules
    command: modprobe {{ item }}
    loop:
    - overlay
    - br_netfilter

  - name: Set sysctl parameters for Kubernetes
    copy:
      dest: /etc/sysctl.d/k8s.conf
      content: |
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward = 1

  - name: Apply sysctl settings
    command: sysctl --system

  - name: Update package index and install required packages
    apt:
      update_cache: yes
      name:
      - ca-certificates
      - curl
      - gpg
      state: present

  - name: Create directory for Docker GPG key
    file:
      path: /etc/apt/keyrings
      state: directory
      mode: '0755'

  - name: Add Docker's official GPG key
    get_url:
      url: https://download.docker.com/linux/ubuntu/gpg
      dest: /etc/apt/keyrings/docker.asc
      mode: '0644'

  - name: Get the architecture
    command: dpkg --print-architecture
    register: dpkg_arch

  - name: Remove stale lock files
    shell: rm -rf /var/lib/apt/lists/lock;rm -rf /var/cache/apt/archives/lock;rm -rf
      /var/lib/dpkg/lock*

  - name: Add Docker repository
    apt_repository:
      repo: "deb [arch={{ dpkg_arch.stdout }} signed-by=/etc/apt/keyrings/docker.asc]
        https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }}
        stable"
      filename: docker
      state: present

  - name: Remove stale lock files
    shell: rm -rf /var/lib/apt/lists/lock;rm -rf /var/cache/apt/archives/lock;rm -rf
      /var/lib/dpkg/lock*

  - name: Install Docker and Containerd
    apt:
      update_cache: yes
      name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
      state: present

  - name: Add user to docker group
    user:
      name: "{{ ansible_user }}"
      groups: docker
      append: yes

  - name: Enable and start Docker services
    systemd:
      name: "{{ item }}"
      enabled: true
      state: started
    loop:
    - docker.service
    - containerd.service

  - name: Configure cgroups to --> systemd
    shell: containerd config default | sed 's/SystemdCgroup = false/SystemdCgroup = true/' | sed 's/sandbox_image = "registry.k8s.io\/pause:[^"]*"/sandbox_image = "registry.k8s.io\/pause:3.10"/' | sudo tee /etc/containerd/config.toml

  - name: Restart Containerd
    systemd:
      name: containerd
      state: restarted

  - name: Remove old Kubernetes repository and GPG
    file:
      path: "{{ item }}"
      state: absent
    loop:
    - /etc/apt/sources.list.d/kubernetes.list
    - /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    - /tmp/kubernetes-release.key

  - name: Download Kubernetes GPG Key
    get_url:
      url: https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key
      dest: /tmp/kubernetes-release.key

  - name: Add Kubernetes GPG Key
    command: gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      /tmp/kubernetes-release.key

  - name: Remove temporary GPG key file
    file:
      path: /tmp/kubernetes-release.key
      state: absent

  - name: Add Kubernetes Repository
    copy:
      dest: /etc/apt/sources.list.d/kubernetes.list
      content: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg]
        https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /'

  - name: Remove stale lock files
    shell: rm -rf /var/lib/apt/lists/lock;rm -rf /var/cache/apt/archives/lock;rm -rf
      /var/lib/dpkg/lock*

  - name: Install Kubernetes Packages
    apt:
      update_cache: yes
      name:
      - kubelet
      - kubeadm
      - kubectl
      state: present

  - name: Mark Kubernetes Packages as held
    command: apt-mark hold kubelet kubeadm kubectl

  - name: Enable kubelet service
    systemd:
      name: kubelet
      state: started
      enabled: true

- name: Initialization of control-plane (master-node)
  hosts: master-node
  become: yes
  tasks:
  - name: Initialize Kubernetes master-node
    command: kubeadm init --pod-network-cidr=10.244.0.0/16
      --apiserver-advertise-address={{ ansible_host }}
    register: kubeadm_init_result
    ignore_errors: yes

  - name: Get join command
    command: kubeadm token create --print-join-command
    register: kubeadm_join_command_raw

  - name: set join command
    set_fact:
      kubeadm_join_command: "{{ kubeadm_join_command_raw.stdout }}"

  - name: Save join command to file
    copy:
      dest: /tmp/join_command.txt
      content: "{{ kubeadm_join_command }}"

  - name: Save join command to a file
    copy:
      content: "{{ kubeadm_join_command }}"
      dest: /tmp/join_command.txt

  - name: Fetch join command to host
    fetch:
      src: /tmp/join_command.txt
      dest: /tmp/join_command.txt
      flat: yes

  - name: Check if kubeadm init was successful or already run
    set_fact:
      kubeadm_initialized: "{{ kubeadm_init_result.rc == 0 }}"

  - name: Skip initialization if already done
    debug:
      msg: "Kubernetes master-node already initialized, skipping."
    when: kubeadm_initialized

- name: Finishing Initialization of control-plane (master-node)
  hosts: master-node
  tasks:
  - name: Create .kube directory
    file:
      path: ".kube"
      state: directory
      mode: '0755'

  - name: Copy admin.conf to .kube/config
    command: sudo cp -f /etc/kubernetes/admin.conf .kube/config

  - name: Change ownership of .kube/config
    command: sudo chown {{ ansible_user }}:{{ ansible_user }} .kube/config

- name: Configure worker-nodes to join
  hosts: worker-node
  become: yes
  tasks:
  - name: Copy join command to worker-node
    copy:
      src: /tmp/join_command.txt
      dest: /tmp/

  - name: join cluster
    shell: "cat /tmp/join_command.txt | bash"